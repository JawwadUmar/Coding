
// Generated By Leetcode2IDE
#include <bits/stdc++.h>
using namespace std;



class Solution {
public:
    int minOperations(vector<int>& nums, vector<int>& numsDivide) {
        
        int curr = numsDivide[0];

        for(int i = 1; i<numsDivide.size(); i++){
            curr = __gcd(curr, numsDivide[i]);
        }

        multiset<int> m(nums.begin(), nums.end());
        int cnt = 0;

        while (!m.empty())
        {
            auto it = m.begin();
            m.erase(it);
            int x = *it;

            if(curr%x ==0){
                return cnt;
            }

            cnt++;
            
        }

        return -1;
        
    }
};


int main() {
	
	Solution leetcode2IDE;
	vector<int> nums1 = {2,3,2,4,3};
	vector<int> numsDivide1 = {9,6,9,3,15};
	int output_1 = 2;
	if(leetcode2IDE.minOperations(nums1,numsDivide1)==output_1){
		cout << "Sample #1 : Accepted" << endl;
	}else{
		cout << "Sample #1 : Wrong Answer" << endl;
	}

	vector<int> nums2 = {4,3,6};
	vector<int> numsDivide2 = {8,2,6,10};
	int output_2 = -1;
	if(leetcode2IDE.minOperations(nums2,numsDivide2)==output_2){
		cout << "Sample #2 : Accepted" << endl;
	}else{
		cout << "Sample #2 : Wrong Answer" << endl;
	}

	


	return 0;
}
	